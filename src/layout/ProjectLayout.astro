---
import BaseLayout from "./BaseLayout.astro";
const { frontmatter } = Astro.props;


---

<BaseLayout pageTitle={frontmatter.title}>

  <div class="titlecontainer">
    <h1>{frontmatter.title}</h1>
  </div>
  <div class="main-container" data-screen={frontmatter.screen}>  
    <div class="slideshow-container">
        {
          frontmatter.images.map((image) =>
            (
             <div class="sliderimage"><img src={image} draggable="false" tabindex="-1"/></div>
            )
          )
        }
    </div>
    <p class="swipe-text">Swipe left for more</p>

  </div>

  <div class="text-container">
    <p>{frontmatter.pubDate.slice(0, 10)}</p>
    <p><em>{frontmatter.description}</em></p>
    <slot />
  </div>
</div>
</BaseLayout>

<script>
  const sliderContainer = document.querySelector('.main-container');
  const slider = document.querySelector('.slideshow-container') as HTMLBaseElement;
  const slideim = document.querySelectorAll('.sliderimage');

  const img =  document.querySelector('.sliderimage img') as HTMLImageElement;
  const screen = sliderContainer.getAttribute('data-screen') || "";

    if(screen == "phone"){
      slider.style.width = "450px"
      slider.style.height = "1000px"
      img.style.width = "450px"
      img.style.height = "1000px"
      slideim.forEach((element: HTMLElement) => {
        element.style.width = "450px";
        element.style.height = "1000px";
      });
    }


  let isDown = false;
  let startX;
  let scrollLeft;

  const infoText = document.querySelector('.swipe-text') as HTMLElement;

  slider.addEventListener('mousedown', (e :MouseEvent) => {
    isDown = true;
    slider.classList.add('active'); // Add grabbing cursor
    startX = e.clientX;
    scrollLeft = slider.scrollLeft;
  });

  slider.addEventListener('mouseleave', () => {
    isDown = false;
    slider.classList.remove('active'); // Remove grabbing cursor
  });

  slider.addEventListener('mouseup', () => {
    isDown = false;
    slider.classList.remove('active'); // Remove grabbing cursor
  });

  slider.addEventListener('mousemove', (e:MouseEvent) => {
    if (!isDown) return; // Stop if the mouse is not pressed
    e.preventDefault();
    const x = e.clientX; // Get the current X position of the mouse
    const walk = (x - startX) * 3 ; // Multiply for scroll speed
    slider.scrollLeft = scrollLeft - walk;
    infoText.style.opacity = "0"; 
  });
</script>


<style>

.titlecontainer{
  display: flex;
  margin: 50px;
  justify-content: center;
  align-items: center;
 
}

.swipe-text{
  background-color: #eeb713;
  color: #3f3f3f;
  padding: 5px;
  border-radius: 15px;
  font-weight: bold;
  opacity: 1; /* Start mit voller Sichtbarkeit */
  transition: opacity 1s ease-in-out; /* Übergangseffekt für das Ausblenden */
}
  
.main-container{
  margin: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

/* Slideshow container */
.slideshow-container {
  display: flex;
  gap: 20px;
  width: 1000px;
  overflow-x: scroll;
  scroll-snap-type: x mandatory;
  cursor: grab;
  scroll-behavior: smooth;
  scrollbar-width: none;   

}



.sliderimage {
  scroll-snap-align: center;
  width:1000px;
  box-sizing: border-box;
  flex-shrink: 0;
  border-radius: 14px;
}

.sliderimage *{
  box-sizing: border-box;
  padding: 20px 30px;
  flex-shrink: 0;
  border-radius: 14px;
  max-height: 1000px ;
}

p{color: black;}
a{color: black;}


.text-container{
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;

}

.text-container *{
  max-width: 1000px;
}

slot{
  max-width: 1000px;

}


slot {
width: 500px;
  color: black;
}

</style>