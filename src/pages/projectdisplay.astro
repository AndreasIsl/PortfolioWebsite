---
import BaseLayout from "../layout/BaseLayout.astro"
const pageTitle = "Projects";
const allProjects = await Astro.glob("../pages/projects/*.md");
let tags = [...new Set(allProjects.map((project) => project.frontmatter.tags).flat())];
---

<BaseLayout pageTitle = {pageTitle}>
    <script  type="module">

        document.addEventListener('DOMContentLoaded', () => {
            
            let filteredTags = [];
            const tagsContainer = document.querySelector('.tags'); 
            const tags = document.querySelectorAll('.tag');
            const projects = document.querySelectorAll('.project-item');   
            const form = document.querySelector('.search-form');
            const input = form?.querySelector('.search-input') ;
            const button = document.querySelector('.clearTagsBtn');
            const activeTags = Array.from(document.querySelectorAll('.tag.active')); 


            // Function to filter tags
            function filterProjects() {
                // Look at every project
                projects.forEach((project) => {
                const projectElement = project ;
                const projectTags = projectElement.dataset.tags?.split(',') || []; // Tags des Projekts
                // Look if a project has any active tags
                const hasActiveTag = filteredTags.some(tag => projectTags.includes(tag));
            
                // Display or hide tags
                if (filteredTags.length === 0 || hasActiveTag) {
                    projectElement.style.display = 'flex'; // show project  
                } else {
                    projectElement.style.display = 'none'; // hide project
                        project 
                }
                });
            }

            // add eventListener for every tag
            tags.forEach(tag => {
                tag.addEventListener('click', (e) => {
                const clickedTag = e.target;
                
                // Toggle the "active" class
                clickedTag.classList.toggle('active');

                //If tag is active move it to the front
                if (clickedTag.classList.contains('active')) {
                    tagsContainer.prepend(clickedTag); 
                    filteredTags.push(clickedTag.innerText );
                } else {
                    tagsContainer.append(clickedTag); 
                    const index = filteredTags.indexOf(clickedTag.innerText);
                    filteredTags.splice(index,1);
                }

                // After every change
                filterProjects();
                });
            });
            
            //Initial filtering
            filterProjects();


            //------ClearTagsButton-------
            button.onclick = function() {                
                filteredTags.forEach((tag) =>{
                    tags.forEach(tagAll => {
                        if(tagAll.innerText == tag){
                            tagAll.classList.toggle('active');
                            tagsContainer.append(tagAll); // Ans Ende verschieben
                        }
                    });

                    const index = filteredTags.indexOf(tag);
                    filteredTags.splice(index,1);
                })

                input.value ="";

                projects.forEach((project) => {
                const projectElement = project;
                    projectElement.style.display = 'flex'; // Projekt anzeigen
                }
            )   
        }

        //search-form
        input.addEventListener('input', () => { 
            const searchText = input.value.trim();
            
            if (!searchText) {  
                return;
            }

            projects.forEach((project) => {
                const projectElement = project;
                const title = project.getAttribute('data-title') || "";
                const description = project.getAttribute('data-description') || "";
                const titleElement = project.querySelector('.project-title');
                const descriptionElement = project.querySelector('.project-description');
                    // Prüfe, ob der Suchtext im Titel oder in der Beschreibung enthalten ist

                    if(titleElement == null){
                        console.log("titleElement is null or undefined");
                    }
                    if(descriptionElement == null){
                        console.log("descriptionElement is null or undefined");
                    }
                    if(title == null){
                        console.log("title is null or undefined");
                    }
                    if(description == null){
                        console.log("description is null or undefined");
                    }

                if (title.toLowerCase().includes(searchText.toLowerCase()) || 
                    description.toLowerCase().includes(searchText.toLowerCase())) {

                    //replace the text trough the regex doesent work TODO
                    const regex = new RegExp(searchText, 'gi');
                    const highlightedTitle = title.replace(regex, (match) => `<span class="highlight">${match}</span>`);
                    const highlightedDescription = description.replace(regex, (match) => `<span class="highlight">${match}</span>`);

                    // Hier setze sicher, dass `innerHTML` verwendet wird, um HTML zu interpretieren.
                    /*titleElement!.innerHTML = highlightedTitle;
                    descriptionElement!.innerHTML = highlightedDescription;*/

                    // Stelle sicher, dass das Projekt sichtbar bleibt
                    projectElement.style.display = 'flex';
                } else {
                    // Verstecke das Projekt, wenn der Text nicht passt
                    projectElement.style.display = 'none';
                }
                });
            });

        });
    </script>

    <div class="tags" >
        {
        tags.map((tag) => (
            <p class="tag">{tag}</p>
        ))
        }
    </div>

    <div class="clearTagsBtn-container">
        <button class="clearTagsBtn">Clear Tags</button>
    </div>

    <div class="search-container">
        <form class="search-form" >
          <input type="text" placeholder="Projects..." name="search" class="search-input">
        </form>
    </div>

    <div class="projects-container">
    {
        allProjects.map((project) => (
            <div class="project-item"  data-tags={project.frontmatter.tags.join(",")} data-title={project.frontmatter.title} data-description={project.frontmatter.description}>    
            { (
                <img src= {project.frontmatter.images[0]} alt={project.frontmatter.title || "Project Image"} />
                <h2 class="project-title">{project.frontmatter.title}</h2>
                <p  class="project-description">{project.frontmatter.description}</p>
                <a class="morebtn" href={`/projects/${project.frontmatter.title}`}>More</a>
                )}
            </div>
        ))
    }
    </div>
</BaseLayout>


   
<style>

    body{
		background-color: #f9f9f9;
	}


    .highlight{
        background-color: #eeb713;
        color: #000000;
        font-weight: bold;
    }

    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .search-input {
        padding: 10px;
        font-size: 1.2em;
        border: 2px solid #ccc;
        border-radius: 4px;
        outline: none;
        width: 300px; 
    }

    .search-input:focus {
        border-color: #eeb713;
    }



    .tags{
        max-width: 1000px;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        margin: 0 auto;  
        margin-top: 10px; 
    }

    .tag{
        background-color: #3f3f3f;
        color: #ffffff;
        margin: 0.25em;
        border: dotted 1px #a1a1a1;
        border-radius: 0.5em;
        padding: 0.5em 1em;
        font-size: 1.15em;
        cursor: pointer;
    }

    .tag:hover{
        border: dotted 2px #eeb713;

    }

    .tag.active {
      background-color: #eeb713; /* Farbe für aktive Tags */
      color: #000000;
      font-weight: bold;

    }

    
    .clearTagsBtn-container{
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 20px;
    }

    .clearTagsBtn-container button{ 
        padding: 10px;
        font-size: 1.2em;
        background-color: #eeb713; /* Farbe für aktive Tags */
        color: #000000;
        font-weight: bold;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .clearTagsBtn-container button:hover{
        background-color: #d0a010;
    }

    .clearTagsBtn-container button:active{
        background-color: #a07b0d;
    }

    /*------------------------- project things -------------------------*/ 

    

    

    .projects-container  {
        padding: 0;
        margin-top: 30px;
        list-style-type: none; 
        display: flex;
        align-items: center;
        justify-items: center;
        flex-wrap: wrap;
        justify-content: space-evenly;
        row-gap: 40px;
        column-gap: 40px;
    }

    .projects-container div {
        display: flex;
        flex-direction: column;
        border: 2px inset #3f3f3f;
        margin-bottom: 10px;
        height: wrap;
        align-items: center; 
        max-width: 500px;
        min-width: 300px;
        background-color: #3f3f3f;
        border-radius: 1em;
        border: solid 4px #3f3f3f;


    }

    .projects-container p {
        font-size: 1.5em;
        margin: 20px;
        height: 100%;
        color: white;
    }

    .projects-container h2 {
        font-size: 2em;
        color: #ffffff;
    }

    .projects-container img {
        border-radius: 1em 1em 0em 0em;
        max-height: 500px;
        min-width: 300px;
        max-width: 498px; 
    }

    .morebtn{
        font-size: 1.5em;
        color: #000000;
        font-weight: bold;
        background-color: #eeb713;
        height: fit-content;
        margin: 10px;
        padding: 5px;
        border-radius: 4px;
        align-self: flex-end;

    }

    .morebtn:hover {
        background-color: #d0a010;
    }

    .morebtn :active {
        background-color: #a07b0d;
    }

</style>