---
import BaseLayout from "../layout/BaseLayout.astro"

const pageTitle = "Projects";
const allProjects = await Astro.glob("../pages/projects/*.md");
let tags = [...new Set(allProjects.map((project) => project.frontmatter.tags).flat())];
---

<BaseLayout pageTitle = {pageTitle}>

    <div class="tags" >
        {
        tags.map((tag) => (
            <p class="tag">{tag}</p>
        ))
        }
    </div>

    <div class="clearTagsBtn-container">
        <button class="clearTagsBtn">Clear Tags</button>
    </div>

    <div class="search-container">
        <form class="search-form" >
          <input type="text" placeholder="Projects..." name="search" class="search-input">
        </form>
    </div>

    <ul class="projects-container">
    {
        allProjects.map((project) => (
            <li class="project-item"  data-tags={project.frontmatter.tags.join(",")} data-title={project.frontmatter.title} data-description={project.frontmatter.description}>    
            { (
                <img src= {project.frontmatter.images[0]} alt={project.frontmatter.title || "Project Image"} />
                <h2 class="project-title">{project.frontmatter.title}</h2>
                <p  class="project-description">{project.frontmatter.description}</p>
                <a class="morebtn" href={`/projects/${project.frontmatter.title}`}>More</a>
                )}
            </li>
        ))
    }
    </ul>
</BaseLayout>

<script>
    let filteredTags = [];
    


    document.addEventListener('DOMContentLoaded', () => {
    const tagsContainer = document.querySelector('.tags'); // Der Container der Tags
    const tags = document.querySelectorAll('.tag'); // Alle Tag-Elemente
    const projects = document.querySelectorAll('.project-item'); // Alle Projekt-Elemente    

    // Funktion zum Filtern der Projekte basierend auf aktiven Tags
    function filterProjects() {
        // Alle aktiven Tags sammeln
        const activeTags = Array.from(document.querySelectorAll('.tag.active'))
        .map(tag => (tag as HTMLElement).dataset.tag); // Active Tags

        // Jedes Projekt prüfen
        projects.forEach((project) => {
        const projectElement = project as HTMLElement;
        const projectTags = projectElement.dataset.tags?.split(',') || []; // Tags des Projekts
        // Prüfen, ob das Projekt eines der aktiven Tags enthält
        const hasActiveTag = filteredTags.some(tag => projectTags.includes(tag));
    
        // Projekt anzeige oder verstecken basierend auf der Tag-Übereinstimmung
        if (filteredTags.length === 0 || hasActiveTag) {
            // Wenn keine aktiven Tags vorhanden sind, alle anzeigen oder bei Übereinstimmung
            projectElement.style.display = 'flex'; // Projekt anzeigen
        } else {
            projectElement.style.display = 'none'; // Projekt verstecken
        }
        });
    }

    // Event-Listener für jedes Tag hinzufügen
    tags.forEach(tag => {
        tag.addEventListener('click', (e) => {
        const clickedTag = e.target as HTMLElement;

        // Toggle the "active" class
        clickedTag.classList.toggle('active');

        // Wenn der Tag aktiv ist, es nach vorne verschieben
        if (clickedTag.classList.contains('active')) {
            tagsContainer.prepend(clickedTag); // Nach vorne verschieben
            filteredTags.push(clickedTag.innerText );
        } else {
            tagsContainer.append(clickedTag); // Ans Ende verschieben
            const index = filteredTags.indexOf(clickedTag.innerText);
            filteredTags.splice(index,1);
        }

        // Nach jeder Tag-Änderung die Projekte filtern
        filterProjects();
        });
    });
    
    // Initiale Filterung bei Seitenaufruf
    filterProjects();
    });

    const button = document.querySelector('.clearTagsBtn') as HTMLButtonElement;
    const tagsContainer = document.querySelector('.tags'); // Der Container der Tags
    console.log(button);
    
    button.onclick = function() {
        const activeTags = Array.from(document.querySelectorAll('.tag.active')); // Active Tags
        const projects = document.querySelectorAll('.project-item'); // Alle Projekt-Elemente    

        
        activeTags.forEach((tag) =>{
            tag.classList.toggle('active');
            tagsContainer.append(tag); // Ans Ende verschieben
            const index = filteredTags.indexOf(tag);
            filteredTags.splice(index,1);
        })

        projects.forEach((project) => {
        const projectElement = project as HTMLElement;
            projectElement.style.display = 'flex'; // Projekt anzeigen
        }
    )}

    //search-form
    document.addEventListener('DOMContentLoaded', () => {

const form = document.querySelector('.search-form');
const input = form?.querySelector('.search-input') as HTMLInputElement;
const projects = document.querySelectorAll('.project-item'); // Alle Projekt-Elemente

input.addEventListener('input', () => {  // Verwende 'input' Event für sofortige Reaktion
    const searchText = input.value.trim();  // Verwende 'value' und trimme Leerzeichen

    if (!searchText) {  // Zeige alle Projekte an, wenn das Suchfeld leer ist
        projects.forEach((project) => {
            (project as HTMLElement).style.display = '';
            // Setze die ursprünglichen Titel und Beschreibungen zurück
            const titleElement = project.querySelector('.project-title');
            const descriptionElement = project.querySelector('.project-description');
            titleElement!.innerHTML = project.getAttribute('data-title')!;
            descriptionElement!.innerHTML = project.getAttribute('data-description')!;
        });
        return;
    }

    projects.forEach((project) => {
        const projectElement = project as HTMLElement;
        const title = project.getAttribute('data-title') || "";
        const description = project.getAttribute('data-description') || "";

        const titleElement = project.querySelector('.project-title');
        const descriptionElement = project.querySelector('.project-description');
                // Prüfe, ob der Suchtext im Titel oder in der Beschreibung enthalten ist
            if (title.toLowerCase().includes(searchText.toLowerCase()) || 
                description.toLowerCase().includes(searchText.toLowerCase())) {

                // Erstelle Regex für die Hervorhebung
                const regex = new RegExp(searchText, 'gi');

                // Ersetze die Suchbegriffe im Titel und in der Beschreibung
                const highlightedTitle = title.replace(regex, (match) => `<span class="highlight">${match}</span>`);
                const highlightedDescription = description.replace(regex, (match) => `<span class="highlight">${match}</span>`);

                // Hier setze sicher, dass `innerHTML` verwendet wird, um HTML zu interpretieren.
                titleElement!.innerHTML = highlightedTitle;
                descriptionElement!.innerHTML = highlightedDescription;

                // Stelle sicher, dass das Projekt sichtbar bleibt
                projectElement.style.display = '';
            } else {
                // Verstecke das Projekt, wenn der Text nicht passt
                projectElement.style.display = 'none';
            }
            });
        });
    });
</script>
   
<style>

    body{
		background-color: #f9f9f9;
	}


    .highlight{
        background-color: #eeb713;
        color: #000000;
        font-weight: bold;
    }

    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .search-input {
        padding: 10px;
        font-size: 1.2em;
        border: 2px solid #ccc;
        border-radius: 4px;
        outline: none;
        width: 300px; 
    }

    .search-input:focus {
        border-color: #eeb713;
    }



    .tags{
        max-width: 1000px;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        margin: 0 auto;  
        margin-top: 10px; 
    }

    .tag{
        background-color: #3f3f3f;
        color: #ffffff;
        margin: 0.25em;
        border: dotted 1px #a1a1a1;
        border-radius: 0.5em;
        padding: 0.5em 1em;
        font-size: 1.15em;
        cursor: pointer;
    }

    .tag:hover{
        border: dotted 2px #eeb713;

    }

    .tag.active {
      background-color: #eeb713; /* Farbe für aktive Tags */
      color: #000000;
      font-weight: bold;

    }

    
    .clearTagsBtn-container{
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 20px;
    }

    .clearTagsBtn-container button{ 
        padding: 10px;
        font-size: 1.2em;
        background-color: #eeb713; /* Farbe für aktive Tags */
        color: #000000;
        font-weight: bold;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .clearTagsBtn-container button:hover{
        background-color: #d0a010;
    }

    .clearTagsBtn-container button:active{
        background-color: #a07b0d;
    }

    /*------------------------- project things -------------------------*/ 

    

    

    .projects-container  {
        padding: 0;
        margin: 0;
        list-style-type: none; 
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        height: wrap;
    }

    .projects-container li {
        display: flex;
        flex-direction: column;
        border: 2px inset #3f3f3f;
        margin-bottom: 10px;
        height: wrap;
        align-items: center; 
        max-width: 500px;
        min-width: 300px;
        background-color: #3f3f3f;
        margin: 50px;
        border-radius: 1em;
        border: solid 4px #3f3f3f;


    }

    .projects-container p {
        font-size: 1.5em;
        margin: 20px;
        height: 100%;
        color: white;
    }

    .projects-container h2 {
        font-size: 2em;
        color: #ffffff;
    }

    .projects-container img {
        border-radius: 1em 1em 0em 0em;
        max-height: 500px;
        min-width: 300px;
        max-width: 498px; 
    }

    .morebtn{
        font-size: 1.5em;
        color: #000000;
        font-weight: bold;
        background-color: #eeb713;
        height: fit-content;
        margin: 10px;
        padding: 5px;
        border-radius: 4px;
        align-self: flex-end;

    }

    .morebtn:hover {
        background-color: #d0a010;
    }

    .morebtn :active {
        background-color: #a07b0d;
    }

</style>